datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Roles for the user model ketal app
enum Role {
    user
    admin
    superadmin
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          Role      @default(admin)
    accounts      Account[]

    supplierId Int?
    supplier   Supplier? @relation(fields: [supplierId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    reviews    Review[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model VerificationToken {
    identifier String   @unique
    token      String
    expires    DateTime

    @@id([identifier])
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String?
    price       Float
    stock       Int
    image       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Supplier {
    id           Int      @id @default(autoincrement())
    name         String   @unique
    contactEmail String   @unique
    phoneNumber  String?
    address      String?
    description  String?
    imgLogo      String?
    createdAt    DateTime @default(now())

    services Service[]
    users    User[]

    supplierType String?
    supplierSubType String?
    location Json?
    photos Json?
    extras Json?
    info Json?

     // Relaciones inversas
    transportServices Service[] @relation("TransportSupplier")
    hotelServices     Service[] @relation("HotelSupplier")

}

model Service {
    id              Int       @id @default(autoincrement())
    supplierId      Int
    name            String
    description     String?
    price           Float
    location        String?
    availableFrom   DateTime?
    availableTo     DateTime?
    createdAt       DateTime  @default(now())
    packs           Json? // {packs:
    images          Json? // {images: [url1, url2, url3]}
    ytLink          String?
    sizeTour        Float?
    serviceType     String?
    serviceCategory String?
    stateFrom       String?
    cityFrom        String?
    stateTo         String?
    cityTo          String?
    includes        Json?
    excludes        Json?
    faqs            Json?
    itinerary       Json?
    transportProviderID Int? 
    supplierTransport   Supplier? @relation("TransportSupplier", fields: [transportProviderID], references: [id])

    hotelProviderID     Int?
    supplierHotel       Supplier? @relation("HotelSupplier", fields: [hotelProviderID], references: [id])
    
    supplier        Supplier  @relation(fields: [supplierId], references: [id])
  
    reviews  Review[]

    dates            Json? // [{ availableFrom: DateTime, availableTo: DateTime }]
}

model Review {
  id         Int      @id @default(autoincrement())
  serviceId  Int
  userId     String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())

  service    Service  @relation(fields: [serviceId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}



model Categories {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    image       String?
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model global_locations {
  id      Int    @id @default(autoincrement())
  country String
  state   String
  city    String
}