datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Roles for the user model ketal app
enum Role {
    user
    admin
    superadmin
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          Role      @default(admin)
    accounts      Account[]

    supplierId    Int?
    supplier      Supplier? @relation(fields: [supplierId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model VerificationToken {
    identifier String   @unique
    token      String
    expires    DateTime

    @@id([identifier])
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String?
    price       Float
    stock       Int
    image       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}


model Supplier {
    id           Int      @id @default(autoincrement())
    name         String   @unique
    contactEmail String   @unique
    phoneNumber  String?
    address      String?
    description  String?
    imgLogo      String?
    createdAt    DateTime @default(now())

    services Service[]
    users    User[]
}

model Service {
    id            Int       @id @default(autoincrement())
    supplierId    Int
    name          String
    description   String?
    price         Float
    location      String?
    availableFrom DateTime?
    availableTo   DateTime?
    createdAt     DateTime  @default(now())
  


    supplier Supplier  @relation(fields: [supplierId], references: [id])
    // bookings Booking[]
    // reviews  Review[]
}

