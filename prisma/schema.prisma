generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String?
    price       Float
    stock       Int
    image       String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model User {
    id             Int      @id @default(autoincrement())
    name           String
    email          String   @unique
    password       String
    role           String
    profilePicture String?
    bio            String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    influencers      Influencer[]
    messagesSent     Message[]    @relation("MessageSender")
    messagesReceived Message[]    @relation("MessageReceiver")
    reviews          Review[]
    activities       Activity[]
    bookings         Booking[]
}

model Influencer {
    id               Int      @id @default(autoincrement())
    userId           Int
    socialMediaLinks String?
    niche            String?
    followersCount   Int?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
}

model Supplier {
    id           Int      @id @default(autoincrement())
    name         String
    contactEmail String   @unique
    phoneNumber  String?
    address      String?
    description  String?
    createdAt    DateTime @default(now())

    services Service[]
}

model Service {
    id            Int       @id @default(autoincrement())
    supplierId    Int
    name          String
    description   String?
    price         Float
    location      String?
    availableFrom DateTime?
    availableTo   DateTime?
    createdAt     DateTime  @default(now())

    supplier Supplier  @relation(fields: [supplierId], references: [id])
    bookings Booking[]
    reviews  Review[]
}

model Booking {
    id          Int      @id @default(autoincrement())
    userId      Int
    serviceId   Int
    bookingDate DateTime @default(now())
    status      String
    totalPrice  Float
    createdAt   DateTime @default(now())

    user    User    @relation(fields: [userId], references: [id])
    service Service @relation(fields: [serviceId], references: [id])
}

model Review {
    id        Int      @id @default(autoincrement())
    userId    Int
    serviceId Int
    rating    Int
    comment   String?
    createdAt DateTime @default(now())

    user    User    @relation(fields: [userId], references: [id])
    service Service @relation(fields: [serviceId], references: [id])
}

model Location {
    id        Int     @id @default(autoincrement())
    name      String
    latitude  Float?
    longitude Float?
    country   String?
    state     String?
    city      String?
}

model Message {
    id         Int      @id @default(autoincrement())
    senderId   Int
    receiverId Int
    content    String
    createdAt  DateTime @default(now())

    sender   User @relation("MessageSender", fields: [senderId], references: [id])
    receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])
}

model Activity {
    id           Int      @id @default(autoincrement())
    userId       Int
    activityType String
    targetId     Int
    createdAt    DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
}
