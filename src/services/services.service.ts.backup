import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { CreateServiceDto } from './dto/create-service.dto';
import { UpdateServiceDto } from './dto/update-service.dto';
import { PrismaService } from 'src/prisma/prisma.service';

@Injectable()
export class ServicesService {

  // Inject PrismaService
  constructor(private prismaService: PrismaService) { }



  // Create a new service
  create(createServiceDto: CreateServiceDto) {
    return this.prismaService.service.create({ data: createServiceDto })
  }

  // Find all services
  findAll() {
    return this.prismaService.service.findMany()
  }

  // Find all services with review stats
  async findAllWithReviewStats() {
    const services = await this.prismaService.service.findMany();
    
    // Get review stats for each service
    const servicesWithStats = await Promise.all(
      services.map(async (service) => {
        const reviews = await this.prismaService.review.findMany({
          where: { serviceId: service.id },
          select: { rating: true }
        });
        
        const totalReviews = reviews.length;
        const averageRating = totalReviews > 0 
          ? reviews.reduce((sum, review) => sum + review.rating, 0) / totalReviews 
          : 0;
        
        return {
          ...service,
          rating: Math.round(averageRating * 10) / 10, // Round to 1 decimal place
          reviewCount: totalReviews
        };
      })
    );
    
    return servicesWithStats;
  }

  // Find one service
  async findOne(id: number) {
    if (typeof id !== 'number' || isNaN(id)) {
      throw new NotFoundException('A valid service id must be provided');
    }
    const serviceFound = await this.prismaService.service.findUnique({
      where: { id }
    })
    if (!serviceFound) {
      throw new NotFoundException(`Service #${id} not found`);
    }
    return serviceFound
  }

  // Update a service
  async update(id: number, updateServiceDto: UpdateServiceDto) {
    const updatedService = await this.prismaService.service.update({
      where: { id },
      data: updateServiceDto
    })
    if (!updatedService) {
      throw new NotFoundException(`Service #${id} not found`);
    }
    return updatedService
  }
  // Remove a service
  async remove(id: number) {
    // First verify the service exists
    await this.findOne(id);

    // Check for dependencies before deletion
    const dependencies = await this.checkServiceDependencies(id);
    if (dependencies.hasReviews) {
      throw new ConflictException(
        `Cannot delete service. It has ${dependencies.reviewsCount} review(s) associated. Please remove the reviews first.`
      );
    }

    // If we get here, it's safe to delete
    try {
      const deletedService = await this.prismaService.service.delete({
        where: { id }
      });
      console.log(`Service ${id} deleted successfully`);
      return deletedService;
    } catch (error) {
      console.error(`Error deleting service ${id}:`, error);
      throw new NotFoundException(`Service #${id} not found`);
    }
  }

  // Check dependencies for a service
  async checkServiceDependencies(id: number) {
    const reviews = await this.prismaService.review.findMany({
      where: { serviceId: id }
    });

    return {
      hasReviews: reviews.length > 0,
      reviewsCount: reviews.length,
      dependencies: [
        ...(reviews.length > 0 ? [`${reviews.length} review(s)`] : [])
      ]
    };
  }

  // Get service dependencies endpoint
  async getServiceDependencies(id: number) {
    await this.findOne(id); // Verify service exists
    return this.checkServiceDependencies(id);
  }

  // Find all services with bus transport information (for admin panel)
  async findAllWithBusInfo(filters: {
    page: number;
    limit: number;
    search?: string;
    hasTransport?: boolean;
  }) {
    const { page, limit, search, hasTransport } = filters;
    const skip = (page - 1) * limit;

    // Construir filtros
    const where: any = {};

    if (search) {
      where.OR = [
        { name: { contains: search, mode: 'insensitive' } },
        { description: { contains: search, mode: 'insensitive' } }
      ];
    }

    if (hasTransport !== undefined) {
      where.hasBusTransport = hasTransport;
    }

    // Obtener servicios con paginación
    const [services, total] = await Promise.all([
      this.prismaService.service.findMany({
        where,
        select: {
          id: true,
          name: true,
          description: true,
          // hasBusTransport: true, // TODO: fix schema
          // busLayout: true,
          // seatPricing: true,
          createdAt: true,
        },
        orderBy: { createdAt: 'desc' },
        skip,
        take: limit,
      }),
      this.prismaService.service.count({ where })
    ]);

    // Calcular estadísticas
    const stats = await this.prismaService.service.groupBy({
      by: ['hasBusTransport'],
      _count: {
        hasBusTransport: true
      }
    });

    const statsFormatted = {
      total,
      withTransport: stats.find(s => s.hasBusTransport === true)?._count.hasBusTransport || 0,
      withoutTransport: stats.find(s => s.hasBusTransport === false)?._count.hasBusTransport || 0,
    };

    return {
      services,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit),
        hasNext: page * limit < total,
        hasPrev: page > 1,
      },
      stats: statsFormatted
    };
  }

  // Get bus transport configuration for a service
  async getBusTransportConfig(id: number) {
    const service = await this.prismaService.service.findUnique({
      where: { id },
      select: {
        id: true,
        name: true,
        description: true,
        hasBusTransport: true,
        busLayout: true,
        seatPricing: true,
      }
    });

    return service;
  }

  // Update bus transport configuration for a service
  async updateBusTransportConfig(
    id: number,
    updateData: {
      hasBusTransport?: boolean;
      busLayout?: any;
      seatPricing?: any;
    }
  ) {
    const { hasBusTransport, busLayout, seatPricing } = updateData;

    // Validar estructura de busLayout si está presente
    if (busLayout) {
      const requiredFields = ['totalRows', 'seatsPerRow', 'aislePositions'];
      const missingFields = requiredFields.filter(field => !(field in busLayout));
      
      if (missingFields.length > 0) {
        throw new Error(`Campos faltantes en busLayout: ${missingFields.join(', ')}`);
      }

      if (busLayout.totalRows < 1 || busLayout.totalRows > 50) {
        throw new Error('El número de filas debe estar entre 1 y 50');
      }

      if (busLayout.seatsPerRow < 2 || busLayout.seatsPerRow > 6) {
        throw new Error('El número de asientos por fila debe estar entre 2 y 6');
      }
    }

    // Validar estructura de seatPricing si está presente
    if (seatPricing) {
      const allowedPriceTypes = ['standard', 'front', 'table'];
      const invalidTypes = Object.keys(seatPricing).filter(
        type => !allowedPriceTypes.includes(type)
      );
      
      if (invalidTypes.length > 0) {
        throw new Error(`Tipos de precio inválidos: ${invalidTypes.join(', ')}`);
      }

      // Validar que los precios sean números positivos
      for (const [type, price] of Object.entries(seatPricing)) {
        if (typeof price !== 'number' || price < 0) {
          throw new Error(`El precio para ${type} debe ser un número positivo`);
        }
      }
    }

    // Actualizar el servicio
    const updatedService = await this.prismaService.service.update({
      where: { id },
      data: {
        ...(hasBusTransport !== undefined && { hasBusTransport }),
        ...(busLayout && { busLayout }),
        ...(seatPricing && { seatPricing }),
      },
      select: {
        id: true,
        name: true,
        description: true,
        hasBusTransport: true,
        busLayout: true,
        seatPricing: true,
      }
    });

    return updatedService;
  }
}
